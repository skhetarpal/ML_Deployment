import pandas as pdimport joblibimport osfrom sklearn.pipeline import Pipelineimport loggingfrom house_price_predictor.config import configfrom house_price_predictor import __version___logger = logging.getLogger(name=config.LOGGER_NAME)def load_train_data() -> pd.DataFrame:        data = pd.read_csv(os.path.join(config.DATASET_DIR, config.TRAINING_DATA_FILE_NAME))    return datadef load_dataset(*, file_name: str) -> pd.DataFrame:        data = pd.read_csv(os.path.join(config.DATASET_DIR, file_name))    return datadef save_pipeline(*, _pipeline) -> None:        delete_old_pipelines()        pipeline_file_name = f'{os.path.join(config.TRAINED_MODEL_DIR, config.PIPELINE_FILE_NAME_ROOT)}{__version__}.pkl'    joblib.dump(_pipeline, pipeline_file_name)    _logger.info(f'Saved pipeline to {pipeline_file_name}')    def load_pipeline() -> Pipeline:        pipeline_file_name = f'{os.path.join(config.TRAINED_MODEL_DIR, config.PIPELINE_FILE_NAME_ROOT)}{__version__}.pkl'    pipeline = joblib.load(pipeline_file_name)    _logger.info(f'Loaded pipeline from {pipeline_file_name}')        return pipelinedef delete_old_pipelines(*, files_to_keep=None) -> None:        if not isinstance(files_to_keep, list):        files_to_keep = [files_to_keep]        files_to_keep.append("__init__.py")        for f in os.listdir(config.TRAINED_MODEL_DIR):        if f not in files_to_keep:            os.remove(os.path.join(config.TRAINED_MODEL_DIR, f))